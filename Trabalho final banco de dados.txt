-- Criação de tabelas

CREATE TABLE cliente (
	id SERIAL PRIMARY KEY,
	nome VARCHAR (50) NOT NULL,
	usuario VARCHAR(20) NOT NULL UNIQUE,
	telefone VARCHAR(20) NOT NULL,
	email TEXT NOT NULL,
	cpf VARCHAR(11) NOT NULL UNIQUE,
	data_nasc DATE NOT NULL
);


CREATE TABLE endereco (
	cliente_id INT PRIMARY KEY,
	cep VARCHAR(8) NOT NULL,
	logradouro VARCHAR(50) NOT NULL,
	numero VARCHAR(10),
	complemento VARCHAR(50),
	bairro VARCHAR(50) NOT NULL,
	cidade VARCHAR(50) NOT NULL,
	uf VARCHAR(2) NOT NULL,
    FOREIGN KEY (cliente_id) REFERENCES cliente(id)
);

CREATE TABLE pedido (
	id SERIAL PRIMARY KEY,
	data_pedido TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
	cliente_id INT REFERENCES cliente (id)
);

CREATE TABLE funcionario (
	id SERIAL PRIMARY KEY,
	nome_func VARCHAR(50) NOT NULL,
	cpf_func VARCHAR(11) NOT NULL UNIQUE
);

CREATE TABLE categoria (
	id SERIAL PRIMARY KEY,
	nome_cat VARCHAR(50) NOT NULL UNIQUE,
	desc_cat TEXT 
);

CREATE TABLE produto (
	id SERIAL PRIMARY KEY,
	nome_prod VARCHAR (50) NOT NULL UNIQUE,
	desc_prod TEXT NOT NULL,
	data_fab_prod DATE NOT NULL,
	quant_estoque_prod INT NOT NULL,
	valor_unit numeric(100,2) NOT NULL,
	categoria_id INT REFERENCES categoria(id),
	funcionario_id INT REFERENCES funcionario(id)
);

CREATE TABLE pedido_produto (
    quant_prod INT NOT NULL,
 	PRIMARY KEY (pedido_id, produto_id),
    pedido_id INT REFERENCES pedido (id) NOT NULL,
    produto_id INT REFERENCES produto (id) NOT NULL
);

 

-- Criação do gatilho
CREATE OR REPLACE FUNCTION verificar_estoque_pedido() RETURNS TRIGGER AS $$
BEGIN
    IF NEW.quant_prod > (SELECT quant_estoque_prod FROM produto WHERE id = NEW.produto_id) THEN
        RAISE EXCEPTION 'Não há estoque disponível suficiente para este produto.';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Vinculando o gatilho
CREATE TRIGGER estoque_disponivel
BEFORE INSERT ON pedido_produto
FOR EACH ROW
EXECUTE FUNCTION verificar_estoque_pedido();

-- Inserção de dados

INSERT INTO funcionario
	(nome_func, cpf_func)
VALUES
	('Gislane', '12634982154'),
	('Vitor', '12634955158'),
	('Rayan', '12637985184'),
	('Wellington', '12734985152'),
	('Rhayllon', '12634992153'),
	('Juliane', '12334082159'),
	('Carlos', '12738092189')
;

INSERT INTO categoria
	(nome_cat, desc_cat)
VALUES
	('Eletrônicos', 'Aparelhos eletrônicos.'),
	('Limpeza', 'Produtos de limpeza.'),
	('Alimentos não pericíveis', 'Ex.: Arroz, feijão, etc'),
	('Laticínios', 'Derivados de leite.'),
	('Embutidos', 'Industrializados')
;

INSERT INTO produto
	(nome_prod, desc_prod, data_fab_prod, quant_estoque_prod, 
	 valor_unit, categoria_id, funcionario_id)
VALUES
	('PS5', 'Videogame', '22/08/2022', '50', '4500.90', '1', '3'),
	('Detergente YPÊ', 'Lava-louças', '22/08/2018', '100', '1.69', '2', '3'),
	('Arroz Tio João', 'Arroz Parboilizado', '22/08/1973', '60', '15.89', '3', '5'),
	('Leite Longa Vida', 'Desnatado', '22/08/2000', '200', '6.00', '4', '4'),
	('Xbox Series X', 'Videogame', '22/08/2019', '50', '2800', '1', '1'),
	('Queijo', 'Mussarela', '22/08/2010', '60', '28.90', '4', '1')
;

INSERT INTO cliente
	(nome, usuario, telefone, email, cpf, data_nasc)
VALUES
	('Gisa Pires', 'gisa123', '21 999999239', 'Gisa@gmail.com', '32609987154', '05/06/1980'),
	('Rayan', 'rayray', '21 999999809', 'Rayan@hotmail.com', '62614902154', '05/06/1980'),
	('Rhayllon', 'rddelas', '21 901999899', 'Rhayllon@gmail.com', '02624982154', '05/06/1980'),
	('Wellington', 'wgnavoz', '21 990099899', 'Wellington@yahoo.com', '93444982154', '05/06/1980'),
	('Vitor Henrique', 'vhb', '21 989990890', 'VH@live.com', '23654982154', '05/06/1980')
;

INSERT INTO endereco
	(cliente_id, cep, logradouro, numero, complemento, bairro, cidade, uf)
VALUES
	(1, '28999312', 'Rua Magalhães Gandavo', '', '', 'Realengo', 'Rio de Janeiro', 'RJ'),
	(2, '28991424', 'Rua Átria', 'Num 39', '', 'Cotia', 'Guapimirim', 'MG'),
	(3, '28999515', 'Avenida A', '9', 'Apt 203', 'Jardim Meudon', 'Teresópolis', 'SP'),
	(4, '28991778', 'Estrada B', '19', 'Fundos', 'Quintandinha', 'Petrópolis', 'MG'),
	(5, '28909581', 'Travessa T', '299', 'Bloco 3 apt 203 quadra J', 'Albuquerque', 'Areal', 'RJ')
;
	
INSERT INTO pedido
	( cliente_id)
VALUES
	(1),
	(2),
	(3),
	(4),
	(5)
;

INSERT INTO pedido_produto
	(quant_prod, pedido_id, produto_id)
VALUES
	(5, 1, 1),
	(10, 2, 2),
	(15, 3, 3),
	(15, 4, 4),
	(10, 5, 5),
	(5, 1, 5),
	(10, 1, 2),
	(5, 3, 5)
	
;

SELECT * FROM pedido_produto AS pp JOIN pedido AS p ON pedido_id = p.id 

-- Atualização de um registro na tabela
UPDATE 
	funcionario
SET 
	nome_func = 'Robson'
WHERE  id = 7;

SELECT * FROM funcionario

-- Delete de um registro na tabela
DELETE FROM funcionario WHERE id = 7;

SELECT * FROM funcionario

-- 7. A e B
SELECT
	c.nome_cat,
	p.nome_prod
FROM categoria c 
LEFT JOIN produto p ON categoria_id = c.id


SELECT 
	STRING_AGG (c.nome, ', '),
	e.uf
FROM endereco e JOIN cliente c ON cliente_id = c.id 
GROUP BY
	e.uf

SELECT
	c.nome_cat,
	COUNT(p.nome_prod)
FROM categoria c 
LEFT JOIN produto p ON categoria_id = c.id
GROUP BY
	c.nome_cat

--7. C
/* NOTA FISCAL
Nome do cliente, valor total, valor dos produtos, endereço, email,
telefone, cpf, DataEmissao, Quantidade produto, Nome produto */

-- Saindo valor total apenas no primeiro item de todos os pedidos
SELECT
    cl.nome,
    cl.email,
    cl.telefone,
    cl.cpf,
    e.cep,
    e.logradouro || ', ' || e.numero || ', ' || e.complemento AS endereco,
    e.bairro,
    e.cidade,
    e.uf,
    ped.data_pedido,
    prod.valor_unit AS valor_produto,
    ped_prod.quant_prod AS quantidade_produtos,
    ped_prod.quant_prod * prod.valor_unit AS valor_total_produto,
    CASE WHEN ROW_NUMBER() OVER (PARTITION BY ped.id ORDER BY prod.id) = 1 THEN 
         SUM(ped_prod.quant_prod * prod.valor_unit) OVER (PARTITION BY ped.id)
    END AS valor_total_pedido
FROM cliente AS cl
INNER JOIN endereco e ON cliente_id = cl.id
INNER JOIN pedido AS ped ON cl.id = ped.cliente_id
INNER JOIN pedido_produto AS ped_prod ON ped.id = ped_prod.pedido_id
INNER JOIN produto AS prod ON ped_prod.produto_id = prod.id
ORDER BY ped.id, prod.id;



-- Nota fiscal por Pedido
SELECT
    cl.nome,
    cl.email,
    cl.telefone,
    cl.cpf,
    e.cep,
    e.logradouro || ', ' || e.numero || ', ' || e.complemento AS endereco,
    e.bairro,
    e.cidade,
    e.uf,
    ped.data_pedido,
	prod.nome_prod,
	ped_prod.quant_prod AS quantidade_produtos,
    prod.valor_unit AS valor_produto,
    ped_prod.quant_prod * prod.valor_unit AS valor_total_produto,
    CASE WHEN ROW_NUMBER() OVER (PARTITION BY ped.id ORDER BY prod.id) = 1 THEN 
         SUM(ped_prod.quant_prod * prod.valor_unit) OVER (PARTITION BY ped.id)
    END AS valor_total_pedido
FROM cliente AS cl
INNER JOIN endereco e ON cliente_id = cl.id
INNER JOIN pedido AS ped ON cl.id = ped.cliente_id
INNER JOIN pedido_produto AS ped_prod ON ped.id = ped_prod.pedido_id
INNER JOIN produto AS prod ON ped_prod.produto_id = prod.id
WHERE ped.id = 1 -- Substitua pelo número do pedido que você deseja selecionar
ORDER BY ped.id, prod.id;